import cv2
import numpy as np
import os

def pixelize(image, pixel_size):
    height, width, _ = image.shape
    small = cv2.resize(image, (width // pixel_size, height // pixel_size), interpolation=cv2.INTER_LINEAR)
    pixelized = cv2.resize(small, (width, height), interpolation=cv2.INTER_NEAREST)
    return pixelized

def process_images(input_folder, output_folder, pixel_size):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
            filepath = os.path.join(input_folder, filename)
            filepath = os.path.normpath(filepath)
            image = cv2.imread(filepath)    

            if image is None:
                print(f"Unable to read image: {filename}")
                continue

            # Pikselize etme
            pixelized_image = pixelize(image, pixel_size)

            # Sarı rengin tespiti
            hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
            lower_yellow = np.array([20, 100, 100])
            upper_yellow = np.array([30, 255, 255])
            yellow_mask = cv2.inRange(hsv_image, lower_yellow, upper_yellow)

            # Pikselize edilmiş görselin üzerine maske uygula
            result_image = np.ones_like(pixelized_image) * 255
            result_image[yellow_mask == 255] = [0, 0, 0]

            # Görüntüyü yeniden boyutlandır
            resized_image = cv2.resize(result_image, (128, 128), interpolation=cv2.INTER_LINEAR)

            # Çıktıyı kaydet
            output_path = os.path.join(output_folder, filename)
            cv2.imwrite(output_path, resized_image)
            print(f"Processed and saved: {output_path}")

# Giriş ve çıkış klasörlerini belirleyin
input_folder = r"C:\Users\atade\Desktop\Sinan_veriseti_20Subat\images_kirpilmis_15_02_2025"  # Giriş klasörü
output_folder = r"C:\Users\atade\Desktop\Sinan_veriseti_20Subat\PixelizedImages"  # Çıkış klasörü
pixel_size = 10  # Piksel boyutu

# Görüntüleri işleme
process_images(input_folder, output_folder, pixel_size)
